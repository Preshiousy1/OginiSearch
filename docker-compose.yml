version: '3.8'

name: ogini-dev

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.debian
    networks:
      - ogini-network
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - rocksdb-data:/usr/src/app/data/rocksdb
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/ogini
      - ROCKSDB_PATH=/usr/src/app/data/rocksdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev:start
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:3000/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  mongodb:
    image: mongo:7
    networks:
      - ogini-network
    ports:
      - '27017:27017'
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=ogini
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/ogini --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    networks:
      - ogini-network
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  mongodb-data:
  rocksdb-data:
  redis-data:

networks:
  ogini-network:
    driver: bridge
