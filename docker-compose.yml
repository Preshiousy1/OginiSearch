version: '3.8'

name: ogini-dev

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.debian
    networks:
      - ogini-network
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      # Connect to PgBouncer instead of direct Postgres
      - POSTGRES_HOST=pgbouncer
      - POSTGRES_PORT=6432
      - POSTGRES_DB=ogini_search_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAX_CACHE_SIZE=2000
      - CACHE_TTL_MS=600000
    depends_on:
      postgres:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev:start
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:3000/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: ogini-pgbouncer-dev
    networks:
      - ogini-network
    ports:
      - '6432:6432'
    volumes:
      - ./config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./config/userlist.txt:/etc/pgbouncer/userlist.txt
    environment:
      - DATABASES_HOST=postgres
      - DATABASES_PORT=5432
      - DATABASES_USER=postgres
      - DATABASES_PASSWORD=postgres
      - DATABASES_DBNAME=ogini_search_dev
      - POOL_MODE=transaction
      - LISTEN_PORT=6432
      - LISTEN_ADDR=0.0.0.0
      - AUTH_TYPE=md5
      - AUTH_FILE=/etc/pgbouncer/userlist.txt
      - ADMIN_USERS=postgres
      - STATS_USERS=postgres
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '6432']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  postgres:
    image: postgres:16-alpine
    container_name: ogini-postgres-dev
    networks:
      - ogini-network
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    environment:
      - POSTGRES_DB=ogini_search_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d ogini_search_dev']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: ogini-redis-dev
    networks:
      - ogini-network
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  postgres-data:
  redis-data:

networks:
  ogini-network:
    driver: bridge
